{"version":3,"file":"static/js/Home.7bde1c27.chunk.js","mappings":"kNAGaA,EAAOC,EAAAA,GAAAA,GAAH,yJASJC,EAAWD,EAAAA,GAAAA,GAAH,mTAkBRE,GAAIF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,kDAIDI,EAAKJ,EAAAA,GAAAA,GAAH,uNAYFK,EAAML,EAAAA,GAAAA,IAAH,kD,6BCzCHM,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACV,EAAD,UACGQ,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,YAAd,OACV,SAACZ,EAAD,WACE,UAACC,EAAD,CAAGY,GAAE,kBAAaF,GAAMG,MAAO,CAACC,KAAKR,GAArC,WACE,SAACH,EAAD,CACEY,IACkB,OAAhBJ,EACIK,EADJ,yCAEsCL,GAExCM,IAAKR,EACLS,MAAM,MACNC,OAAO,SAET,SAACjB,EAAD,UAAKO,QAZMC,EADL,KAmBjB,C,gHC3BYU,E,QAAKtB,GAAAA,GAAH,qH,mBCuBf,EAnBa,WACX,OAA4BuB,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeiB,EAAf,KAOA,OALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,KAAKH,EACT,GAAE,IAIDjB,IACE,iCACE,SAACe,EAAD,8BACA,SAAChB,EAAA,EAAD,CAAWC,OAAQA,MAI1B,C,mMCrBKqB,EAAM,mCAGL,SAAeF,IAAtB,4CAAO,OAAP,oBAAO,qGACkBG,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wFACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,GAAY,CACjDN,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBT,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASH,EACTU,MAAM,GAAD,OAAKA,GACVC,KAAM,KALL,cACCP,EADD,yBAQEA,EAASC,KAAKC,SARhB,kEAWA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCJ,GAAjC,wFACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA+B,CACzDN,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAASC,KAAKQ,MANhB,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAoCN,GAApC,wFACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA+B,CACzDN,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEAxCPL,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-flow: wrap;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 35px;\n`;\n\nexport const ListItem = styled.li`\n  max-width: 300px;\n  height: 460px;\n  box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n  border-radius: 15px;\n\n\n  &:hover,\n  &:focus {\n    box-shadow: 20px 20px 60px orange, -20px -20px 60px pink;\n  }\n\n  &:hover H2,\n  &:focus H2 {\n    color: orange;\n  }\n`;\n\nexport const A = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const H2 = styled.h2`\n  text-decoration: none;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 16px;\n  max-width: fit-content;\n  color: black;\n  padding: 8px;\n  margin: 0;\ncolor: #171a23;\n`\n\nexport const Img = styled.img`\n  border-radius: 15px;\n\n`","import { List, H2, ListItem, A, Img } from './MovieList.styled';\nimport imageNotFound from '../../images/image-not-found.webp';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ title, id, poster_path }) => (\n        <ListItem key={id}>\n          <A to={`/movies/${id}`} state={{from:location}}>\n            <Img\n              src={\n                poster_path === null\n                  ? imageNotFound\n                  : `https://image.tmdb.org/t/p/w500${poster_path}`\n              }\n              alt={title}\n              width=\"300\"\n              height=\"400\"\n            />\n            <H2>{title}</H2>\n          </A>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.number,\n      poster_path: PropTypes.string,\n    })\n  )\n}","import styled from 'styled-components';\n\nexport const H1 = styled.h1`\nmargin-bottom: 35px;\nmargin-left: 45px;\ncolor: gray;\nfont-size: 25px;\nfont-weight: 400;\n`\n\n","import { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'services/moviesApi';\nimport { H1 } from './Home.styled';\nimport { MovieList } from 'components/MovieList/MovieList';\n\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetchTrendingMovies()\n      .then(setMovies)\n  }, []);\n\n  return (\n    \n    movies && (\n      <>\n        <H1>Trending today</H1>\n        <MovieList movies={movies} />\n      </>\n    )\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst KEY = 'a97041c864f8f3eafd5ecc2c5648e42c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMoviesById(movie_id) {\n  const response = await axios(`/movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesByName(query) {\n  const response = await axios('search/movie', {\n    params: {\n      api_key: KEY,\n      query: `${query}`,\n      page: 1,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMoviesByCast(movie_id) {\n  const response = await axios(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.cast;\n}\n\nexport async function fetchMoviesByReviews(movie_id) {\n  const response = await axios(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.results;\n}"],"names":["List","styled","ListItem","A","Link","H2","Img","MovieList","movies","location","useLocation","map","title","id","poster_path","to","state","from","src","imageNotFound","alt","width","height","H1","useState","setMovies","useEffect","fetchTrendingMovies","then","KEY","axios","params","api_key","response","data","results","fetchMoviesById","movie_id","fetchMoviesByName","query","page","fetchMoviesByCast","cast","fetchMoviesByReviews"],"sourceRoot":""}