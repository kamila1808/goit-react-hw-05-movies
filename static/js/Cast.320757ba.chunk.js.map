{"version":3,"file":"static/js/Cast.320757ba.chunk.js","mappings":"2NAEaA,EAAOC,EAAAA,GAAAA,GAAH,mcAwBJC,EAAWD,EAAAA,GAAAA,GAAH,yKAMRE,EAAIF,EAAAA,GAAAA,EAAH,0U,mBCAd,EA3Ba,WACX,IAAMG,GAAUC,EAAAA,EAAAA,MAEhB,OACE,+BACE,SAACL,EAAD,UACGI,GACCA,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAACR,EAAD,YACE,gBACES,IACmB,OAAjBF,EACIG,EADJ,0CAEuCH,GAEzCI,IAAKL,KAGP,SAACL,EAAD,UAAIK,KACJ,UAACL,EAAD,yBAAeO,OAXFH,EADP,OAkBrB,C,oJCxBYO,EAAkB,WAC7B,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GAASI,KAAKL,EAC/B,GAAE,CAACC,IAEGF,CACR,EAEYX,EAAoB,WAC/B,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOX,EAAP,KAAgBmB,EAAhB,KAMA,OAJAH,EAAAA,EAAAA,YAAU,YACRI,EAAAA,EAAAA,IAAkBN,GAASI,KAAKC,EACjC,GAAE,CAACL,IAEGd,CACR,EAEYqB,EAAuB,WAClC,IAAQP,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOW,EAAP,KAAgBC,EAAhB,KAMA,OAJAP,EAAAA,EAAAA,YAAU,YACRQ,EAAAA,EAAAA,IAAqBV,GAASI,KAAKK,EACpC,GAAE,CAACT,IAEGQ,CACR,C,mMCpCKG,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEASA,SAAef,EAAtB,+CAAO,OAAP,oBAAO,WAA+BgB,GAA/B,wFACkBN,EAAAA,EAAAA,GAAM,UAAD,OAAWM,GAAY,CACjDL,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBR,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASJ,EACTU,MAAM,GAAD,OAAKA,GACVC,KAAM,KALL,cACCN,EADD,yBAQEA,EAASC,KAAKC,SARhB,kEAWA,SAAeZ,EAAtB,+CAAO,OAAP,oBAAO,WAAiCa,GAAjC,wFACkBN,EAAAA,EAAAA,GAAM,UAAD,OAAWM,EAAX,YAA+B,CACzDL,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAKM,MANhB,kEASA,SAAeb,EAAtB,+CAAO,OAAP,oBAAO,WAAoCS,GAApC,wFACkBN,EAAAA,EAAAA,GAAM,UAAD,OAAWM,EAAX,YAA+B,CACzDL,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEAxCPL,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","hooks/useFetchMovie.js","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100px);\n  gap: 15px;\n  margin-top: 10px;\n  /* max-width: 680px; */\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    max-width: 680px;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 1200px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    max-width: 680px;\n    padding: 0;\n  }\n`;\n\nexport const ListItem = styled.li`\n  box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px,\n    rgb(0 0 0 / 20%) 0px 2px 1px;\n  border-radius: 0px 0px 4px 4px;\n`;\n\nexport const P = styled.p`\n  max-width: fit-content;\n  padding: 2px;\n  margin: 0 auto;\n  font-size: 11px;\n\n  @media screen and (min-width: 768px) {\n    max-width: fit-content;\n  padding: 4px;\n  margin: 0px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: fit-content;\n  padding: 4px;\n  margin: 0px;\n  }\n`;\n","import { useFetchMovieCast } from 'hooks/useFetchMovie';\nimport { List, ListItem, P } from './Cast.styled';\nimport imageNotFound from '../../images/image-not-found.webp';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const credits = useFetchMovieCast();\n\n  return (\n    <>\n      <List>\n        {credits &&\n          credits.map(({ id, name, profile_path, character }) => (\n              <ListItem key={id}>\n                <img\n                  src={\n                    profile_path === null\n                      ? imageNotFound\n                      : `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  }\n                  alt={name}\n     \n                />\n                <P>{name}</P>\n                <P>Character: {character}</P>\n              </ListItem>\n          ))}\n      </List>\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  credits: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      profile_path: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesById } from 'services/moviesApi';\nimport { fetchMoviesByReviews } from 'services/moviesApi';\nimport { fetchMoviesByCast } from 'services/moviesApi';\n\nexport const useFetchMovieId = () => {\n  const [movies, setMovies] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMoviesById(movieId).then(setMovies);\n  }, [movieId]);\n\n  return movies;\n};\n\nexport const useFetchMovieCast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    fetchMoviesByCast(movieId).then(setCredits)\n  }, [movieId])\n\n  return credits;\n}\n\nexport const useFetchMovieReviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMoviesByReviews(movieId).then(setReviews)\n  }, [movieId])\n\n  return reviews;\n}\n\n\n","import axios from 'axios';\n\nconst KEY = 'a97041c864f8f3eafd5ecc2c5648e42c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMoviesById(movie_id) {\n  const response = await axios(`/movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesByName(query) {\n  const response = await axios('search/movie', {\n    params: {\n      api_key: KEY,\n      query: `${query}`,\n      page: 1,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMoviesByCast(movie_id) {\n  const response = await axios(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.cast;\n}\n\nexport async function fetchMoviesByReviews(movie_id) {\n  const response = await axios(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.results;\n}"],"names":["List","styled","ListItem","P","credits","useFetchMovieCast","map","id","name","profile_path","character","src","imageNotFound","alt","useFetchMovieId","useState","movies","setMovies","movieId","useParams","useEffect","fetchMoviesById","then","setCredits","fetchMoviesByCast","useFetchMovieReviews","reviews","setReviews","fetchMoviesByReviews","KEY","fetchTrendingMovies","axios","params","api_key","response","data","results","movie_id","fetchMoviesByName","query","page","cast"],"sourceRoot":""}